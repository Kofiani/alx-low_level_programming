int _putchar(char c)
{
	return (write(1, &c, 1));
}

int _islower(int c)
{
	if (c >= 97 && c < 123)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

int _isalpha(int c)
{
	if (c > 64 && c < 123)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

int _abs(int c)
{
	int a = -1;

	if (c < 0)
	{
		return (c * a);
	}
	else
	{
		return (c);
	}
}

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		while (c < 91)
		{
			c++;
			return (1);
		}
	}
	return (0);
}

int _strlen(char *s)
{
	int i;
	i = 0;
	while (s[i] != '\0')
	{
		i++;
	}
	return (i);
}

void _puts(char *str)
{
	int i;
	i = 0;
	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}

char *_strncpy(char *dest, char *src, int n)
{
	int i;
	i = 0;
	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
	dest[i] = '\0';
	i++;
	}
	return (dest);
}

int _strcmp(char *s1, char *s2)
{
	while ((*s1 && *s2) && (*s1 == *s2))
	{
		s1++;   s2++;
	}
	return (*s1 - *s2);
}

int _atoi(char *s)
{
	int i, j, n, m;
	i = n = 0;  m = 1;
	while ((*(s + i) < '0' || *(s + i) > '9') && (*(s + i) != '\0'))
	{
		if (*(s + i) == '-')
		{
			m *= -1;
		}
		i++;
	}
	j = i;
	while ((*(s + j) >= '0') && (*(s + j) <= '9'))
	{
		n = n * 10 + m * (*(s + j) - '0');
		j++;
	}
	return (n);
}

char *_strcat(char *dest, char *src)
{
	int i, j;
	i = 0;
	j = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[j] != '\0')
	{
		dest[i + j] = src[j];   j++;
	}
	dest[j + i] = '\0';
	return (dest);
}

char *_strncat(char *dest, char *src, int n)
{
	int i, j;
	i = 0;
	j = 0;
	while (dest[j] != '\0')
	{
		j++;
	}
	while (src[i] != '\0' && i < n)
	{
		dest[j + i] = src[i];
		i++;
	}
	dest[j + i] = '\0';
	return (dest);
}

char *_strcpy(char *dest, char *src)
{
	int i;
	i = 0;
	while (src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;
	while (i < n)
	{
		*(s + i) = b;
		i++;
	}
	return (s);
}

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int j;
	for (j = 0; j < n; j++)
	{
		*(dest + j) = *(src + j);
	}
	return (dest);
}

char *_strchr(char *s, char c)
{
	int i;
	for (i = 0; *(s + i) >= '\0'; i++)
	{
		if (*(s + i) == c)
		return (s + i);
	}
	return ('\0');
}

unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0, i;
	while (*s)
	{
		for (i = 0; accept[i] != '\0'; i++)
		{
			if (*s == accept[i])
			{
				bytes++;
				break;
			}
			else if (accept[i + 1] == '\0')
			{
				return (bytes);
			}
		}
		s++;
	}
	return (bytes);
}

char *_strpbrk(char *s, char *accept)
{
	int ch;
	while (*s != '\0')
	{
		for (ch = 0; accept[ch] != '\0'; ch++)
		{
			if (*s == accept[ch])
			{
				return (s);
			}
		}
		s++;
	}
	return ('\0');
}

char *_strstr(char *haystack, char *needle)
{
	int i = 0, j = 0;
	while (haystack[i])
	{
		while (needle[j] && (haystack[i] == needle[0]))
		{
			if (haystack[i + j] == needle[j])
				j++;
			else
				break;
		}
		if (needle[j])
		{
			i++;
			j = 0;
		}
		else
			return (haystack + i);
	}
	return (0);
} 
